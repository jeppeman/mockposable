import groovy.json.JsonSlurper

apply plugin: 'maven-publish'
apply plugin: 'signing'

group = GROUP
version = VERSION_NAME

def isReleaseBuild() {
    return version.contains("SNAPSHOT") == false
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL')
            ? RELEASE_REPOSITORY_URL
            : "https://ossrh-staging-api.central.sonatype.com/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL')
            ? SNAPSHOT_REPOSITORY_URL
            : "https://ossrh-staging-api.central.sonatype.com/content/repositories/snapshots/"
}

def getRepositoryUsername() {
    return hasProperty('SONATYPE_NEXUS_USERNAME') ? SONATYPE_NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('SONATYPE_NEXUS_PASSWORD') ? SONATYPE_NEXUS_PASSWORD : ""
}

components.configureEach {
    if (it.name == "release" && (project.getPlugins().hasPlugin('com.android.application') ||
            project.getPlugins().hasPlugin('com.android.library'))) {
        publishing {
            publications {
                aar(MavenPublication) {
                    version = version
                    groupId = GROUP

                    from components.findByName("release")

                    pom {
                        name = POM_NAME
                        description = POM_DESCRIPTION
                        url = POM_URL
                        packaging = POM_PACKAGING

                        scm {
                            url = POM_SCM_URL
                            connection = POM_SCM_CONNECTION
                            developerConnection = POM_SCM_DEV_CONNECTION
                        }

                        licenses {
                            license {
                                name = POM_LICENCE_NAME
                                url = POM_LICENCE_URL
                                distribution = POM_LICENCE_DIST
                            }
                        }

                        developers {
                            developer {
                                id = POM_DEVELOPER_ID
                                name = POM_DEVELOPER_NAME
                            }
                        }
                    }

                    alias false
                    artifactId = POM_ARTIFACT_ID
                }
            }
        }

        if (isReleaseBuild()) {
            signing {
                required { isReleaseBuild() && gradle.taskGraph.hasTask("publish") }
                sign publishing.publications.findAll { it.name.endsWith("aar") } as Publication[]
            }
        }
    }
}

afterEvaluate {
    if (project.getPlugins().hasPlugin('com.android.application') ||
            project.getPlugins().hasPlugin('com.android.library')) {

        task androidSourcesJar(type: Jar) {
            archiveClassifier = 'sources'
            from android.sourceSets.main.java.source
        }
    } else {
        task sourcesJar(type: Jar, dependsOn: classes) {
            archiveClassifier = 'sources'
            from sourceSets.main.allSource
        }

        task javadocJar(type: Jar, dependsOn: javadoc) {
            archiveClassifier = 'javadoc'
            from javadoc.destinationDir
        }

        tasks.withType(GenerateMavenPom) { task ->
            doFirst {
                def pom = task.pom

                pom.name = POM_NAME
                pom.url = POM_URL
                pom.description = POM_DESCRIPTION

                pom.scm {
                    url = POM_SCM_URL
                    connection = POM_SCM_CONNECTION
                    developerConnection = POM_SCM_DEV_CONNECTION
                }

                pom.licenses {
                    license {
                        name = POM_LICENCE_NAME
                        url = POM_LICENCE_URL
                        distribution = POM_LICENCE_DIST
                    }
                }

                pom.developers {
                    developer {
                        id = POM_DEVELOPER_ID
                        name = POM_DEVELOPER_NAME
                    }
                }
            }
        }

        publishing {
            publications {
                mavenJava(MavenPublication) {
                    artifact sourcesJar
                    artifact javadocJar

                    from components.kotlin

                    groupId = GROUP
                    artifactId = POM_ARTIFACT_ID
                    version = version

                    pom {
                        packaging = POM_PACKAGING
                    }
                }
            }
        }

        signing {
            required { isReleaseBuild() && gradle.taskGraph.hasTask("publish") }
            sign publishing.publications
        }
    }

    publishing {
        repositories {
            maven {
                url isReleaseBuild() ? getReleaseRepositoryUrl() : getSnapshotRepositoryUrl()
                credentials {
                    username = getRepositoryUsername()
                    password = getRepositoryPassword()
                }
            }
        }
    }

    tasks.register('moveFromOSSRHToCentralPublisherPortal') {
        doLast {
            def repoKey = get('search/repositories').repositories[0].key
            post("upload/repository/$repoKey")
        }
    }

    tasks.withType(PublishToMavenRepository) {
        finalizedBy('moveFromOSSRHToCentralPublisherPortal')
    }
}

def request(path, method, body = null) {
    def url = "https://ossrh-staging-api.central.sonatype.com/manual/$path"
    def con = new URI("https://ossrh-staging-api.central.sonatype.com/manual/$path").toURL().openConnection()
    def str = new String(Base64.encoder.encode("${getRepositoryUsername()}:${getRepositoryPassword()}".getBytes()))
    con.addRequestProperty('Authorization', "Bearer $str")
    con.setRequestMethod(method)
    if (method == "POST" || method == "PUT") {
        con.setDoOutput(true)
    }
    if (body != null) {
        con.outputStream.write(body.getBytes())
    }
    def responseCode = con.getResponseCode()
    if (responseCode >= 200 && responseCode <= 299) {
        def responseBody = con.inputStream.getText()
        if (responseBody != null && !responseBody.isEmpty()) {
            return new JsonSlurper().parseText(responseBody)
        }
    } else {
        def errorBody = con?.errorStream?.getText()
        if (errorBody != null && !errorBody.isEmpty()) {
            throw new RuntimeException("$method $url failed: code=$responseCode, body=$errorBody")
        } else {
            throw new RuntimeException("$method $url failed: code=$responseCode")
        }
    }
}

def get(path) {
    return request(path, 'GET')
}

def post(path, body = null) {
    return request(path, 'POST', body)
}
